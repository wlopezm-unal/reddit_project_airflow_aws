name: CI/CD for Airflow Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Usar la acción de GitHub para Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # Usar la acción de GitHub para Docker Compose
      - name: Set up Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.23.3
      
      - name: Deploy with Docker Compose
        run: |
          docker-compose up -d --build
          echo "Waiting for containers to be healthy..."
          sleep 60

      - name: Check Docker containers status
        run: |
          docker ps
          docker compose ps
          docker compose logs airflow-webserver
          docker compose logs airflow-scheduler
      
      - name: Verify Postgres Connection
        run: |
          docker compose exec -T airflow-webserver airflow db check
          docker compose exec -T airflow-webserver airflow connections list

      - name: Test DAGs
        run: |
          docker compose exec -T airflow-webserver python -c "
          from airflow.models import DagBag
          dag_bag = DagBag()
          if dag_bag.import_errors:
              raise Exception(f'DAG import errors: {dag_bag.import_errors}')
          print('All DAGs successfully loaded:')
          for dag_id in dag_bag.dag_ids:
              print(f'- {dag_id}')
          "

      - name: Run DAG Tests (if any)
        run: |
          docker compose exec -T airflow-webserver pytest tests/dags -v || echo "No tests found"

      - name: Clean up
        if: always()
        run: |
          docker compose down -v
          docker system prune -f
